[program:celery]
# Use '-Ofair' to optimize Celery for long running tasks
# References:
#   * http://celery.readthedocs.org/en/latest/userguide/optimizing.html#prefork-pool-prefetch-settings
#   * https://library.launchkit.io/three-quick-tips-from-two-years-with-celery-c05ff9d7f9eb
command=celery worker --app pendulum.app -E -Ofair --loglevel=WARN
directory=/code

autostart=true
autorestart=true

stdout_logfile=/var/log/supervisor/%(program_name)s.log
redirect_stderr=true
stderr_logfile=NONE

# Fixed 'missing' log messages, by telling Python to stop buffering the output stream
# (see https://github.com/Supervisor/supervisor/issues/13 for details)
#
# HACK: Serious problem with user/group owner/permissions for VOLUMEs in our containers:
#	* Causes:
# 		* Everything within the Docker container is (by default) run as root
# 			* Meaning the $STATUS_DIR is owned by root, as it's created by the 'docker-entrypoint.sh'
#			  (this script is run whenever the Docker container starts).
# 		* Celery workers complain if run as root
#		* To fix this, within supervisor config we force the Celery workers to run as the user 'celery'
# 		* Now Celery workers can't write experiment status nor the results, as the workers don't
#		  have sufficient permissions for $RESULTS_DIR and $STATUS_DIR
# 	* Workarounds:
# 		* Switch Celery to run as root, via 'C_FORCE_ROOT' ENV var
# 			* It's not really a good idea to run Celery workers as root
# 		* 'chown' the entire $RESULTS_DIR, so that 'celery:celery' owns it
# 			* The UIDs and GIDs on the host machine become unpredictable and nonsensical
#			  (i.e. $STATUS_DIR was owned by 'landscape')
# 			* This is going to be even worse with multiple Salt experiments are involved,
#			  as their $RESULTS_DIR UIDs will basically become random
#	* Fix: No sane way to fix this, until Docker provides a solution upstream
# 	* References:
# 		* https://github.com/docker/docker/issues/7198
# 		* http://stackoverflow.com/questions/23544282/what-is-the-best-way-to-manage-permissions-for-docker-shared-volumes
# 		* https://github.com/docker/docker/pull/12648
# 		* https://github.com/docker/docker/issues/15187
environment=PYTHONUNBUFFERED="1", C_FORCE_ROOT="1"

# How long the program needs to stay running after a startup to
# consider the start successful.
startsecs=10

# How long to wait for the program to exit cleanly, before killing it
stopwaitsecs=15

# When resorting to send SIGKILL to the program to terminate it
# send SIGKILL to its whole process group instead,
# taking care of its children as well.
killasgroup=true

# Start after RabbitMQ and Redis
priority=800
